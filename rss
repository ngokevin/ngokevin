

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="/rss" rel="self"
               type="application/rss+xml" />
    <title></title>
    <link>/rss</link>
    <language>en-us</language>
    <pubDate>Wed, 15 Mar 2017 13:52:02 GMT</pubDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    
      
        <item>
          <title>A Glimpse into Competitive VR Gaming</title>
          <link>/blog/competitive-vr-gaming/</link>
          <pubDate>Mon, 04 Apr 2016 00:00:00 GMT</pubDate>
          <description>
            
              <![CDATA[<img align="left" hspace="5" width="320" src="http://i.imgur.com/VhhztHL.jpg"/>Ready Player One]]>
            
            &lt;p&gt;Just one more quarter. So close to beating that high score. Being at the local
arcade, spaced out in front of a blipping machine with a display of flashing
lights. That&#39;s the feeling I get when I play &lt;a href=&#34;http://www.i-illusions.com/home/space-pirate-trainer/&#34;&gt;Space Pirate Trainer&lt;/a&gt;. But in this
age, the leaderboard is global, the game is in virtual reality, and it&#39;s going
to take a bit more skill.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.i-illusions.com/home/space-pirate-trainer/&#34;&gt;Space Pirate Trainer&lt;/a&gt; is a game by I-llusions for the &lt;a href=&#34;https://www.htcvive.com/us/&#34;&gt;HTC Vive&lt;/a&gt;
featuring full room-scale and hand-tracked controllers. You are standing on a
docking bay in space. Waves of droids surround you. In each of your hands is a
gun. The guns can be toggled to different modes (single, burst, auto, laser,
and tickle beam), and you can reach behind your back to switch to a shield.&lt;/p&gt;
&lt;p&gt;No more twitching with a mouse and clicking like you would Counter-Strike. You
hold the controllers just as you would with a gun, pull the trigger just as you
would with a gun. And you strafe, not with WASD, but with your entire body to
dodge bullets in slow-motion.&lt;/p&gt;
&lt;p&gt;It&#39;s great exercise well. I might play for 20 minutes at a time, though it&#39;s
hard to tell how much time passes. And my heart is racing at the end of it.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2CVkwBoRczM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;leaderboard&#34;&gt;Leaderboard&lt;/h2&gt;
&lt;p&gt;I&#39;ve been sort of a beta tester for the last couple months, having had a Vive
DK1 and a Vive Pre at the &lt;a href=&#34;http://mozvr.com/&#34;&gt;Mozilla VR&lt;/a&gt; lab. Though I&#39;m not alone. It
recently updated to include a global leaderboard. At the top is Colin Northway,
creator of Fantastic Contraption, with an insane score of 85K. He&#39;s damn
accurate.  For comparison, my current personal record is 20K, and it takes
about 25K to get onto the top ten (at time of writing).  Though once this game
releases, I suspect it&#39;s about to get a lot more competitive.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Current Leaderboard&#34; src=&#34;https://pbs.twimg.com/media/CfL_zfHUMAAp6rI.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;tactics&#34;&gt;Tactics&lt;/h2&gt;
&lt;p&gt;Between coding sessions, I take a break to blow up hunks of metal.&lt;/p&gt;
&lt;p&gt;The biggest tip I can give is to &lt;strong&gt;use your ears&lt;/strong&gt;. Droids will surround you,
and you can tell which droids are about to attack from the noises they make.
Paying attention to the spatial audio will let you know when and where you will
need to evade.&lt;/p&gt;
&lt;p&gt;It also helps to try to focus and clear one side of the map at a time to reduce
the surround enemies have on you. Once you hear droids attacking you from the
other side, then you turn your attention.&lt;/p&gt;
&lt;p&gt;Arsenal-wise, I went through several tactics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dual-wielding autos: easy to use, but take too long to kill.&lt;/li&gt;
&lt;li&gt;Dual-wielding laser pistols, firing from the hip: spray-and-pray can be
 effective but requires a bit of luck.&lt;/li&gt;
&lt;li&gt;Single laser pistol, single shield: focus on clearing enemies on one side at
a time, while using the shield to protect your blind side.&lt;/li&gt;
&lt;li&gt;Dual-wielding laser pistols&lt;/li&gt;
&lt;li&gt;Single laser pistol, aiming like a handgun: focus on accuracy, be lean, and dodge.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve gotten farthest with &lt;strong&gt;gripping a single laser pistol&lt;/strong&gt;. No second gun, no
shield. Focusing on two hands is a bit of a distraction for me. I&#39;m starting
to develop a good trigger finger. When you take out several droids in a row
without a single miss, especially during a dodge or weave, you feel like a
futuristic laser-firin&#39; Dirty Harry.&lt;/p&gt;
&lt;h2 id=&#34;future-of-competitive-gaming&#34;&gt;Future of Competitive Gaming&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.counter-strike.net/&#34;&gt;Counter-Strike&lt;/a&gt; has been the king of competitive shooting games since forever.
Though the core gameplay hasn&#39;t changed too much; the most notable changes are
in looks. It&#39;s easy to imagine games like Space Pirate Trainer taking
competitive gaming to another level. No longer does success rely on hand-eye
coordination, but on overall fitness and dexterity. Will existing competitive
gamers&#39; skill translate?&lt;/p&gt;
&lt;p&gt;Competitive gaming might start to look like &lt;a href=&#34;http://swordartonline.wikia.com/wiki/Gun_Gale_Online&#34;&gt;Gun Gale arc of Sword Art
Online&lt;/a&gt; or slashing up baddies in the Metaverse with a samurai sword.
There is no longer a distinction between the player and the avatar, you are the
player.&lt;/p&gt;
          </description>
          <guid>
            /blog/competitive-vr-gaming/
          </guid>
        </item>
      
    
      
        <item>
          <title>How to Write an A-Frame VR Component</title>
          <link>/blog/aframe-component/</link>
          <pubDate>Sun, 17 Jan 2016 00:00:00 GMT</pubDate>
          <description>
            
              <![CDATA[<img align="left" hspace="5" width="320" src="http://thevrjump.com/assets/img/articles/aframe-system/aframe-example.jpg"/>Abstract representation of components by @rubenmueller of thevrjump.com.]]>
            
            &lt;p&gt;&lt;a href=&#34;/blog/aframe&#34;&gt;A-Frame&lt;/a&gt; is a WebVR framework that introduces the
&lt;a href=&#34;/blog/aframe-vs-3dml&#34;&gt;entity-component system&lt;/a&gt; (&lt;a href=&#34;docs&#34;&gt;docs&lt;/a&gt;) to the DOM. The
entity-component system treats every &lt;strong&gt;entity&lt;/strong&gt; in the scene as a placeholder
object which we apply and mix &lt;strong&gt;components&lt;/strong&gt; to in order to add appearance,
behavior, and functionality. A-Frame comes with some standard components out of
the box like camera, geometry, material, light, or sound. However, people can
write, publish, and register their own components to do &lt;strong&gt;whatever&lt;/strong&gt; they want
like have entities &lt;a href=&#34;https://github.com/dmarcos/a-invaders/tree/master/js/components&#34;&gt;collide/explode/spawn&lt;/a&gt;, be controlled by
&lt;a href=&#34;https://github.com/ngokevin/aframe-physics-components&#34;&gt;physics&lt;/a&gt;, or &lt;a href=&#34;https://jsbin.com/dasefeh/edit?html,output&#34;&gt;follow a path&lt;/a&gt;. Today, we&#39;ll be going through
how we can write our own A-Frame components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This article is now part of the A-Frame documentation. View the most &lt;a href=&#34;https://aframe.io/docs/master/core/component.html&#34;&gt;up-to-date version&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-a-component-looks-like&#34;&gt;What a Component Looks Like&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#from-the-dom&#34;&gt;From the DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#under-the-hood&#34;&gt;Under the Hood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#defining-the-schema&#34;&gt;Defining the Schema&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#property-types&#34;&gt;Property Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#single-property-schemas&#34;&gt;Single-Property Schemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-property-schemas&#34;&gt;Multiple-Property Schemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#defining-the-lifecycle-methods&#34;&gt;Defining the Lifecycle Methods&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#component-init-set-up&#34;&gt;Component.init() - Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#component-update-olddata-do-the-magic&#34;&gt;Component.update(oldData) - Do the Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#component-remove-tear-down&#34;&gt;Component.remove() - Tear Down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#component-tick-time-background-behavior&#34;&gt;Component.tick() - Background Behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#component-pause-and-component-play-stop-and-go&#34;&gt;Component.pause() and Component.play() - Stop and Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boilerplate&#34;&gt;Boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#examples&#34;&gt;Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#line-component&#34;&gt;Line Component&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#line-component-skeleton&#34;&gt;Line Component - Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#line-component-schema&#34;&gt;Line Component - Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#line-component-update&#34;&gt;Line Component - Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#line-component-usage&#34;&gt;Line Component - Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-a-component-looks-like&#34;&gt;What a Component Looks Like&lt;/h2&gt;
&lt;p&gt;A component contains a bucket of data in the form of component properties. This
data is used to modify the entity. For example, we might have an &lt;em&gt;engine&lt;/em&gt;
component. Possible properties might be &lt;em&gt;horsepower&lt;/em&gt; or &lt;em&gt;cylinders&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://thevrjump.com/assets/img/articles/aframe-system/aframe-system.jpg&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
Abstract representation of a component by @rubenmueller of thevrjump.com.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;from-the-dom&#34;&gt;From the DOM&lt;/h3&gt;
&lt;p&gt;Let&#39;s first see what a component looks like from the DOM.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&#34;https://aframe.io/docs/components/light.html&#34;&gt;light component&lt;/a&gt; has properties such as type, color,
and intensity. In A-Frame, we register and configure a component to an entity
using an HTML attribute and a style-like syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; color: crimson; intensity: 2.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would give us a light in the scene. To demonstrate composability, we could
give the light a spherical representation by mixing in the &lt;a href=&#34;https://aframe.io/docs/components/geometry.html&#34;&gt;geometry
component&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere; radius: 5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; color: crimson; intensity: 2.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or we can configure the position component to move the light sphere a bit to the right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere; radius: 5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; color: crimson; intensity: 2.5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;5 0 0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given the style-like syntax and that it modifies the appearance and behavior of
DOM nodes, component properties can be thought of as a rough analog to CSS. In
the near future, I can imagine component property stylesheets.&lt;/p&gt;
&lt;h3 id=&#34;under-the-hood&#34;&gt;Under the Hood&lt;/h3&gt;
&lt;p&gt;Now let&#39;s see what a component looks like &lt;strong&gt;under the hood&lt;/strong&gt;. A-Frame&#39;s most
basic component is the &lt;a href=&#34;https://aframe.io/docs/components/position.html&#34;&gt;position component&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vec3&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;object3D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;object3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;object3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The position component uses only a tiny subset of the component API, but what
this does is register the component with the name &#34;position&#34;, define a &lt;code&gt;schema&lt;/code&gt;
where the component&#39;s value with be parsed to an &lt;code&gt;{x, y, z}&lt;/code&gt; object, and when
the component initializes or the component&#39;s data updates, set the position of
the entity with the &lt;code&gt;update&lt;/code&gt; callback. &lt;code&gt;this.el&lt;/code&gt; is a reference from the
component to the DOM element, or entity, and &lt;code&gt;object3D&lt;/code&gt; is the entity&#39;s
&lt;a href=&#34;http://threejs.org/&#34;&gt;three.js&lt;/a&gt;. Note that A-Frame is built on top of three.js so many
components will be using the three.js API.&lt;/p&gt;
&lt;p&gt;So we see that components consist of a name and a definition, and then they can
be registered to A-Frame. We saw the the position component definition defined
a &lt;code&gt;schema&lt;/code&gt; and an &lt;code&gt;update&lt;/code&gt; handler. Components simply consist of the &lt;code&gt;schema&lt;/code&gt;,
which defines the shape of the data, and several handlers for the component to
modify the entity in reaction to different types of events.&lt;/p&gt;
&lt;p&gt;Here is the current list of properties and methods of a component definition:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Data of the component derived from the schema default values, mixins, and the entity&#39;s attributes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;el&lt;/td&gt;
&lt;td&gt;Reference to the &lt;a href=&#34;https://aframe.io/docs/core/entity.html&#34;&gt;entity&lt;/a&gt; element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;schema&lt;/td&gt;
&lt;td&gt;Names, types, and default values of the component property value(s).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td&gt;Called once when the component is initialized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;td&gt;Called both when the component is initialized and whenever the component&#39;s data changes (e.g, via &lt;em&gt;setAttribute&lt;/em&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remove&lt;/td&gt;
&lt;td&gt;Called when the component detaches from the element (e.g., via &lt;em&gt;removeAttribute&lt;/em&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tick&lt;/td&gt;
&lt;td&gt;Called on each render loop or tick of the scene.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;play&lt;/td&gt;
&lt;td&gt;Called whenever the scene or entity plays to add any background or dynamic behavior.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pause&lt;/td&gt;
&lt;td&gt;Called whenever the scene or entity pauses to remove any background or dynamic behavior.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;defining-the-schema&#34;&gt;Defining the Schema&lt;/h2&gt;
&lt;p&gt;The component&#39;s schema defines what type of data it takes. A component can
either be single-property or consist of multiple properties. And properties
have &lt;em&gt;property types&lt;/em&gt;. Note that single-property schemas and property types are
being released in A-Frame &lt;code&gt;v0.2.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A property might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And a schema consisting of multiple properties might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#FFF&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;selector&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;uv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since components in the entity-component system are just buckets of data that
are used to affect the appearance or behavior of the entity, the schema plays a
crucial role in the definition of the component.&lt;/p&gt;
&lt;h3 id=&#34;property-types&#34;&gt;Property Types&lt;/h3&gt;
&lt;p&gt;A-Frame comes with several built-in property types such as &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;,
&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;selector&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, or &lt;code&gt;vec3&lt;/code&gt;. Every single property is assigned a
type, whether explicitly through the &lt;code&gt;type&lt;/code&gt; key or implictly via inferring the
value. And each type is used to assign &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;stringify&lt;/code&gt; functions. The
parser deserializes the incoming string value from the DOM to be put into the
component&#39;s data object. The stringifier is used when using &lt;code&gt;setAttribute&lt;/code&gt; to
serialize back to the DOM.&lt;/p&gt;
&lt;p&gt;We can actually define and register our own property types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerPropertyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;radians&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Default stringify is .toString().&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;single-property-schemas&#34;&gt;Single-Property Schemas&lt;/h3&gt;
&lt;p&gt;If a component has only one property, then it must either have a &lt;code&gt;type&lt;/code&gt; or a
&lt;code&gt;default&lt;/code&gt; value. If the type is defined, then the type is used to parse and
coerce the string retrieved from the DOM (e.g., &lt;code&gt;getAttribute&lt;/code&gt;). Or if the
default value is defined, the default value is used to infer the type.&lt;/p&gt;
&lt;p&gt;Take for instance the &lt;a href=&#34;https://aframe.io/docs/components/visible.html&#34;&gt;visible component&lt;/a&gt;. The schema property
definition implicitly defines it as a boolean:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Type will be inferred to be boolean.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or the &lt;a href=&#34;https://aframe.io/docs/components/rotation.html&#34;&gt;rotation component&lt;/a&gt; which explicitly defines the value as a &lt;code&gt;vec3&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;rotation&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Default value will be 0, 0, 0 as defined by the vec3 property type.&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vec3&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using these defined property types, schemas are processed by
&lt;code&gt;registerComponent&lt;/code&gt; to inject default values, parsers, and stringifiers for
each property. So if a default value is not defined, the default value will be
whatever the property type defines as the &#34;default default value&#34;.&lt;/p&gt;
&lt;h3 id=&#34;multiple-property-schemas&#34;&gt;Multiple-Property Schemas&lt;/h3&gt;
&lt;p&gt;If a component has multiple properties (or one named property), then it consists of
one or more property definitions, in the form described above, in an object keyed by
property name. For instance, a physics body component might define a schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;physics-body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;boundingBox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vec3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;mass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;velocity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vec3&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Having multiple properties is what makes the component take the syntax in the
form of &lt;code&gt;physics=&#34;mass: 2; velocity: 1 1 1&#34;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the schema defined, all data coming into the component will be passed
through the schema for parsing. Then in the lifecycle methods, the component
has access to &lt;code&gt;this.data&lt;/code&gt; which in a single-property schema is a value and in a
multiple-propery schema is an object.&lt;/p&gt;
&lt;h2 id=&#34;defining-the-lifecycle-methods&#34;&gt;Defining the Lifecycle Methods&lt;/h2&gt;
&lt;h3 id=&#34;componentinit-set-up&#34;&gt;Component.init() - Set Up&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; is called once in the component&#39;s lifecycle when it is mounted to the
entity. &lt;code&gt;init&lt;/code&gt; is generally used to set up variables or members that may used
throughout the component or to set up state. Though not every component will
need to define an &lt;code&gt;init&lt;/code&gt; handler. Sort of like the component-equivalent method
to &lt;code&gt;createdCallback&lt;/code&gt; or &lt;code&gt;React.ComponentDidMount&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;look-at&lt;/code&gt; component&#39;s &lt;code&gt;init&lt;/code&gt; handler sets up some variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target3D&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Vector3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example uses of &lt;code&gt;init&lt;/code&gt; by some of the standard A-Frame components:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;camera&lt;/td&gt;
&lt;td&gt;Create and set a THREE.PerspectiveCamera on the entity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cursor&lt;/td&gt;
&lt;td&gt;Attach event listeners.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;light&lt;/td&gt;
&lt;td&gt;Register light to the lighting system.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;look-at&lt;/td&gt;
&lt;td&gt;Create a helper vector.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;material&lt;/td&gt;
&lt;td&gt;Set up variables, mainly to visualize the state of the component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasd-controls&lt;/td&gt;
&lt;td&gt;Set up an object to keep track of pressed keys. Bind methods.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;componentupdateolddata-do-the-magic&#34;&gt;Component.update(oldData) - Do the Magic&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; handler is called both at the beginning of the component&#39;s
lifecycle with the initial &lt;code&gt;this.data&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; every time the component&#39;s data
changes (generally during the entity&#39;s &lt;code&gt;attributeChangedCallback&lt;/code&gt; like with a
&lt;code&gt;setAttribute&lt;/code&gt;). The update handler gets access to the previous state of the
component data passed in through &lt;code&gt;oldData&lt;/code&gt;. The previous state of the component
can be used to tell exactly which properties changed to do more granular
updates.&lt;/p&gt;
&lt;p&gt;The update handler uses &lt;code&gt;this.data&lt;/code&gt; to modify the entity, usually interacting
with three.js APIs. One of the simplest update handlers is the
&lt;a href=&#34;https://aframe.io/docs/components/visible.html&#34;&gt;visible&lt;/a&gt; component&#39;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;object3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;visible&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A slightly more complex update handler might be the &lt;a href=&#34;https://aframe.io/docs/components/light.html&#34;&gt;light&lt;/a&gt; component&#39;s,
which we&#39;ll show via abbreviated code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diffData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oldData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{});&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;light&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diffData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// If there is an existing light and the type hasn&amp;#39;t changed, update light.&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diffData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diffData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// No light exists yet or the type of light has changed, create a new light.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;light&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getLight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Register the object3D of type `light` to the entity.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setObject3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;light&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The entity&#39;s &lt;code&gt;object3D&lt;/code&gt; is a plain THREE.Object3D. Other three.js object types
such as meshes, lights, and cameras can be set with &lt;code&gt;setObject3D&lt;/code&gt; where they
will be appeneded to the entity&#39;s &lt;code&gt;object3D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example uses of &lt;code&gt;update&lt;/code&gt; by some of the standard A-Frame components:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;camera&lt;/td&gt;
&lt;td&gt;Set THREE.PerspectiveCamera object properties such as aspect ratio, fov, or near/far clipping planes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;look-at&lt;/td&gt;
&lt;td&gt;Set or update target entity to track the position of.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;material&lt;/td&gt;
&lt;td&gt;If component is just attaching, create a material. If shader has not changed, update material. If shader has changed, replace the material.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasd-controls&lt;/td&gt;
&lt;td&gt;Update the position based on the current velocity. Update the velocity based on the keys pressed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;componentremove-tear-down&#34;&gt;Component.remove() - Tear Down&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;remove&lt;/code&gt; handler is called when the component detaches from the entity such
as with &lt;code&gt;removeAttribute&lt;/code&gt;. This is generally used to remove all modifications,
listeners, and behaviors to the entity that the component added.&lt;/p&gt;
&lt;p&gt;For example, when the &lt;a href=&#34;https://aframe.io/docs/components/light.html&#34;&gt;light component&lt;/a&gt; detaches, it removes the light
it previously attached from the entity and thus the scene:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeObject3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;light&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example uses of &lt;code&gt;remove&lt;/code&gt; by some of the standard A-Frame components:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;camera&lt;/td&gt;
&lt;td&gt;Remove the THREE.PerspectiveCamera from the entity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;geometry&lt;/td&gt;
&lt;td&gt;Set a plain THREE.Geometry on the mesh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;material&lt;/td&gt;
&lt;td&gt;Set a default THREE.MeshBasicMaterial on the mesh and unregister material from the system.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasd-controls&lt;/td&gt;
&lt;td&gt;Remove keydown and keyup listeners.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;componentticktime-background-behavior&#34;&gt;Component.tick(time) - Background Behavior&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tick&lt;/code&gt; handler is called on every single tick or render loop of the scene.
So expect it to run on the order of 60-120 times for second. The global uptime of
the scene in seconds is passed into the tick handler.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&#34;https://aframe.io/docs/components/look-at.html&#34;&gt;look-at&lt;/a&gt; component, which instructs an entity to
look at another target entity, uses the tick handler to update the rotation in
case the target entity changes its position:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;tick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// target3D and vector are set from the update handler.&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;object3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lookAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setFromMatrixPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matrixWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example uses of &lt;code&gt;tick&lt;/code&gt; by some of the standard A-Frame components:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;look-at&lt;/td&gt;
&lt;td&gt;Update rotation of entity to face towards tracked target, in case the target is moving.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;physics&lt;/td&gt;
&lt;td&gt;Update the physics world simulation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasd-controls&lt;/td&gt;
&lt;td&gt;Use current velocity to move the entity (generally the camera), update velocity if keys are pressed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;componentpause-and-componentplay-stop-and-go&#34;&gt;Component.pause() and Component.play() - Stop and Go&lt;/h3&gt;
&lt;p&gt;To support pause and play, just as with a video game or to toggle entities for
performance, components can implement &lt;code&gt;play&lt;/code&gt; and &lt;code&gt;pause&lt;/code&gt; handlers. These are
invoked when the component&#39;s entity runs its &lt;code&gt;play&lt;/code&gt; or &lt;code&gt;pause&lt;/code&gt; method. When an
entity plays or pauses, all of its child entities are also played or paused.&lt;/p&gt;
&lt;p&gt;Components should implement play or pause handlers if they register any
dynamic, asynchronous, or background behavior such as animations, event
listeners, or tick handlers.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;look-controls&lt;/code&gt; component simply removes its event listeners
such that the camera does not move when the scene is paused, and it adds its
event listeners when the scene starts playing or is resumed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;pause&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeEventListeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;play&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example uses of &lt;code&gt;pause&lt;/code&gt; and &lt;code&gt;play&lt;/code&gt; by some of the standard A-Frame components:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sound&lt;/td&gt;
&lt;td&gt;Pause/play sound.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasd-controls&lt;/td&gt;
&lt;td&gt;Remove/attach event listeners.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;boilerplate&#34;&gt;Boilerplate&lt;/h2&gt;
&lt;p&gt;I suggest that people start off with my &lt;a href=&#34;https://github.com/ngokevin/aframe-component-boilerplate&#34;&gt;component boilerplate&lt;/a&gt;,
even hardcore tool junkies. This will get you straight into building a
component and comes with everything you will need to publish your component
into the wild. The boilerplate handles creating a stubbed component, build
steps for both NPM and browser distribution files, and publishing to Github
Pages.&lt;/p&gt;
&lt;p&gt;Generally with boilerplates, it is better to start from scratch and build your
own boilerplate, but the A-Frame component boilerplate contains a lot of tribal
inside knowledge about A-Frame and is updated frequently to reflect new things
landing on A-Frame. The only possibly opinionated pieces about the boilerplate
is the development tools it internally uses that are hidden away by NPM
scripts.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;line-component&#34;&gt;Line Component&lt;/h3&gt;
&lt;p&gt;Let&#39;s go through building a basic complete component, a &lt;em&gt;line&lt;/em&gt; component. This
line component will simply render a line. We will make it the component
flexible to be able to specify the vertices and color.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Play with this &lt;a href=&#34;https://codepen.io/team/mozvr/pen/yeEQNG&#34;&gt;example line component in Codepen&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;line-component-skeleton&#34;&gt;Line Component - Skeleton&lt;/h4&gt;
&lt;p&gt;Here is a high-level view of the skeleton of the component, without the meat.
For this component, we&#39;ll need the &lt;code&gt;schema&lt;/code&gt;, as all components require, the
&lt;code&gt;update&lt;/code&gt; handler, and the &lt;code&gt;remove&lt;/code&gt; handler. The rest of the lifecycle method
handlers aren&#39;t necessary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;coordinates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;AFRAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Allow line component to accept vertices and color.&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Create or update the line geometry.&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Remove the line geometry.&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;line-component-schema&#34;&gt;Line Component -Schema&lt;/h4&gt;
&lt;p&gt;Since we have two properties we want to accept, &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;, we will
need a multi-property schema. The &lt;code&gt;color&lt;/code&gt; property will just be a simple string
that will be fed to &lt;code&gt;THREE.Color&lt;/code&gt; which does a lot of work for us. The &lt;code&gt;path&lt;/code&gt;
property will need a custom property type to parse an array of &lt;code&gt;vec3&lt;/code&gt;s. That
property type does not exist as a built-in type yet, but we can define an
inline parse and stringifier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;c1&#34;&gt;// Allow line component to accept vertices and color.&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#333&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// Deserialize path in the form of comma-separated vec3s: `0 0 0, 1 1 1, 2 0 3`.&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// Serialize array of vec3s in case someone does&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// setAttribute(&amp;#39;line&amp;#39;, &amp;#39;path&amp;#39;, [...]).&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The component API is entirely up to us. If we wanted the path to take a
different syntax or abstract it further such that it maybe only accepts a
starting point and a length and handle the math for the developer, that is our
perogative to permissionlessly implement.&lt;/p&gt;
&lt;p&gt;The schema will handle the shape of the data so by the time it gets to the
lifecycle handlers, it will be in a nice data structure.&lt;/p&gt;
&lt;h4 id=&#34;line-component-update&#34;&gt;Line Component - Update&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; handler is called both on component attach and on the entity&#39;s
&lt;code&gt;attributeChangedCallback&lt;/code&gt;. In the update for the line component, we want to
reate a line geometry if it doesn&#39;t exist yet, or update it if it does. We can
create a line in &lt;code&gt;three.js&lt;/code&gt; by combining a &lt;code&gt;THREE.LineBasicMaterial&lt;/code&gt; and
&lt;code&gt;THREE.Geometry&lt;/code&gt; and manually pushing vertices.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oldData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Set color with material.&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;material&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LineBasicMaterial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Add vertices to geometry.&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;geometry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Geometry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vec3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vertices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Vector3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vec3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vec3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vec3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Apply mesh.&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setObject3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mesh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For simplicity, we can just update the line by completely replacing it. In
other components, we might want to more granularly update objects for
performance.&lt;/p&gt;
&lt;p&gt;When we set the object with &lt;code&gt;setObject3D&lt;/code&gt;, we specify the object type. In this
case, it is a &lt;code&gt;mesh&lt;/code&gt;, which is a geometry combined with a material. Other
object types might be &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;camera&lt;/code&gt;. &lt;code&gt;setObject3D&lt;/code&gt; just puts the object
into a map and appends the object under the entity&#39;s scene graph
(&lt;code&gt;THREE.Group&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;line-component-remove&#34;&gt;Line Component - Remove&lt;/h4&gt;
&lt;p&gt;For removal, we can just use &lt;code&gt;removeObject3D&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;removeObject3D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mesh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will remove the object from the entity&#39;s scene graph.&lt;/p&gt;
&lt;h4 id=&#34;line-component-usage&#34;&gt;Line Component - Usage&lt;/h4&gt;
&lt;p&gt;Then we with the line component written and registered, we can use it in HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-mixin&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: #E20049&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-mixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-assets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;happy-face&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0 2 -10&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;mixin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;path: -1 1 0, -1 0.5 0, -1 0 0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;mixin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;path: 1 1 0, 1 0.5 0, 1 0 0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;mixin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;path: -2 -1 0, 0 -2 0, 2 -1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-sky&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#FFEED0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-sky&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.imgur.com/icggby2.jpg&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
  Happy face with the line component! Play with it on &lt;a href=&#34;http://codepen.io/team/mozvr/pen/yeEQNG&#34;&gt;Codepen&lt;/a&gt;.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
          </description>
          <guid>
            /blog/aframe-component/
          </guid>
        </item>
      
    
      
        <item>
          <title>360-degree Photography Guide (Ricoh Theta S)</title>
          <link>/blog/360-photography/</link>
          <pubDate>Tue, 05 Jan 2016 00:00:00 GMT</pubDate>
          <description>
            
              <![CDATA[<img align="left" hspace="5" width="320" src="http://i.imgur.com/t5QKpki.jpg"/>Shoot with Theta, remote shutter with smartphone, view later in Google Cardboard.]]>
            
            &lt;p&gt;I took the &lt;a href=&#34;http://theta360.com&#34;&gt;Ricoh Theta S&lt;/a&gt; all around Hong Kong and Guangzhou for the
holidays. The Ricoh Theta S is a freshly released camera featuring two 180-degree
wide-angle lens that can take 360-degree (equirectangular) photos with a single
exposure or button press, opening up immersive 360-degree photography to the
masses. With most familiar only with flat 2D photography, there is a completely
different workflow to adapt to. Taking the Theta to the streets of Mong
Kok, the most population-dense area and literally the busiest district in the
world, here is what I learned about 360-degree shooting workflow and composition.&lt;/p&gt;
&lt;h2 id=&#34;about-the-ricoh-theta-s&#34;&gt;About the Ricoh Theta S&lt;/h2&gt;
&lt;p&gt;The Ricoh Theta S is the successor to the Ricoh Theta, featuring improvements
across the board just crossing the line of producing usable images. Quick rundown of the
technical specs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two 180-degree fisheye lens (f2)&lt;/li&gt;
&lt;li&gt;12-megapixel JPEG images (4200x2800)&lt;/li&gt;
&lt;li&gt;Remote connectivity through Wi-Fi with &lt;a href=&#34;http://play.google.com/store/apps/details?id=com.theta360&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://itunes.apple.com/us/app/ricoh-theta-s/id1023254741?mt=8&#34;&gt;iOS&lt;/a&gt; app&lt;/li&gt;
&lt;li&gt;Manual exposure capability (though aperture is fixed at f2)&lt;/li&gt;
&lt;li&gt;Low quality video capability including audio (30fps, upscaled 1920x1080)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It retails at $350. Given the specs, it is an expensive toy for enthusiasts and
early adopters&lt;/p&gt;
&lt;h2 id=&#34;shooting-workflow&#34;&gt;Shooting Workflow&lt;/h2&gt;
&lt;p&gt;Here&#39;s what I learned about shooting the camera itself, the physical aspects.&lt;/p&gt;
&lt;h3 id=&#34;remote-shutter-is-mandatory&#34;&gt;Remote Shutter is Mandatory&lt;/h3&gt;
&lt;p&gt;If you handhold the camera, your hand will be very prominent on the lower half
of the 360-degree image. The shutter button is situated underneath the lens,
and there is no way to hide your hand while pressing the button. Unfortunately,
the Theta S does not have a built-in timer capability.&lt;/p&gt;
&lt;p&gt;So you must use the Android or iOS apps (linked above) to trigger the shutter
remotely. Install the app, make sure Wi-Fi is not switched off on the camera,
connect to the camera via Wi-Fi (the password is on the bottom of the camera),
and launch the app. You can get a (choppy) live view of the image from the app
as well.&lt;/p&gt;
&lt;h3 id=&#34;tripod-is-mandatory&#34;&gt;Tripod is Mandatory&lt;/h3&gt;
&lt;p&gt;We can shooting remotely, but we need a tripod to hold the camera without
filling up the shot. The Theta &lt;em&gt;can&lt;/em&gt; stand up by itself, but placing it
on a flat surface will cause the surface to take up a lot of the shot. A
tripod, being a stick, won&#39;t take up as much room.&lt;/p&gt;
&lt;p&gt;It also allows complete freedom to compose the shot. And it allows us to hold
the camera well above head-level.&lt;/p&gt;
&lt;p&gt;I use the &lt;a href=&#34;http://www.amazon.com/Sony-VCT-R100-Lightweight-Compact-Tripod/dp/B000EFIJTA/&#34;&gt;Sony VCT-R100 Tripod&lt;/a&gt;. It&#39;s cheap, lightweight, very
adjustable, and folds up small enough to fit comfortably into a messenger bag.
The pan handle is also useful as a hook to carry the tripod around hands-free.
It&#39;s useful for holding above head or placing on the ground.&lt;/p&gt;
&lt;p&gt;For a tripod purely for walkaround street photography, I&#39;d also consider
the &lt;a href=&#34;http://www.amazon.com/Pedco-UltraPod-Lightweight-Camera-Tripod/dp/B000ANCPNM/&#34;&gt;Pedco Ultrapod II&lt;/a&gt;, to be very discreet. Although it is less
versatile than having a tripod that can go to full height.&lt;/p&gt;
&lt;h3 id=&#34;exposure-settings&#34;&gt;Exposure Settings&lt;/h3&gt;
&lt;p&gt;The Theta has auto, shutter priority, ISO priority, and manual modes.
The aperture is fixed at f2. I switch between shutter speed and ISO priority
depending on the situation.&lt;/p&gt;
&lt;p&gt;I mainly shoot ISO priority as it leaves less guesswork. During the day, I
might use about 200-400 ISO just to make sure I get a good shutter speed.
During the night, if the scene had no moving subjects and the camera was on a
stable tripod, I might use ISO 100 to get reduce noise.&lt;/p&gt;
&lt;p&gt;Shooting shutter speed priority has bitten me. During the day, I tried to set
1/80 maximum shutter speed and everything was blown out. It&#39;s hard to guess
what the minimum shutter speed is so using ISO priority at a low setting
ensures getting that minimum shutter speed.&lt;/p&gt;
&lt;h3 id=&#34;review-images-often&#34;&gt;Review Images Often&lt;/h3&gt;
&lt;p&gt;There is less instant feedback when shooting with the Theta since there is no
LCD on the camera. Images must be transferred over Wi-Fi which can take several seconds.
And using the app, it is often too much of a hassle to go to image viewing mode
and then back to shooting mode.&lt;/p&gt;
&lt;p&gt;But every once in a while, make sure to chimp on your images to make sure the
exposure settings are correct. Especially when learning to use the camera, it
also helps to check if the composition looks good. It can be surprising with
the wide-angle lens how much it stretches perspective.&lt;/p&gt;
&lt;h3 id=&#34;handling&#34;&gt;Handling&lt;/h3&gt;
&lt;p&gt;I found some tips on handling the Theta you will want to know about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Theta goes to sleep after a while. The LED above the shutter will
blink. To wake it up, just press the shutter button.&lt;/li&gt;
&lt;li&gt;The Wi-Fi server on the camera takes a few seconds to boot up. So try to leave
it on while you are shooting or carrying it around. This probably affects
battery life, so bring along some USB battery packs. The Theta might
last only about half a day.&lt;/li&gt;
&lt;li&gt;Just turn off live view in shooting mode. Turning it off reduces
shutter lag, probably saves battery life, and the feed is too choppy and grainy
to be useful anyways.&lt;/li&gt;
&lt;li&gt;The app will also sometimes become unresponsive so you will have to restart it.&lt;/li&gt;
&lt;li&gt;Turning on noise reduction immensely improves image quality.&lt;/li&gt;
&lt;li&gt;Keep the cover on when not in use. It&#39;s bound to get scratched or dropped.&lt;/li&gt;
&lt;li&gt;Don&#39;t seriously use the video function. 30FPS at less-than-HD quality is
pretty useless for consumption.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shooting-alongside-a-regular-camera&#34;&gt;Shooting Alongside a Regular Camera&lt;/h3&gt;
&lt;p&gt;If you&#39;re out on a shoot, you will probably still want to pack your regular
camera alongside the Theta. It will be difficult to wield your regular camera
along with a tripod with the Theta attached.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;heavily&lt;/em&gt; recommend the &lt;a href=&#34;http://www.amazon.com/Peak-Design-Capture-Camera-Clip/dp/B00H7JGOS4/ref=sr_1_1?ie=UTF8&amp;amp;qid=1451841715&amp;amp;sr=8-1&#34;&gt;Capture Camera Clip&lt;/a&gt;. The Capture allows you
to holster the camera on a belt or strap. This allows you to carry a camera
hands-free when not in use, without any annoying camera straps. It&#39;s secure; I
carry my Pentax K3 on my hip even in tight subways in China without worrying
about getting it swiped.&lt;/p&gt;
&lt;p&gt;I also recommend getting a tripod head with a quick-release plate. With the
Theta on a quick release plate, and the Capture being compatible with
quick-release plates, you can switch on the tripod between the Theta and
regular camera rapidly without having to spend time screwing around (pun
intended). I got a quick-release tripod ball head in Mong Kok for $40!&lt;/p&gt;
&lt;h2 id=&#34;composition&#34;&gt;Composition&lt;/h2&gt;
&lt;p&gt;Here&#39;s what I learned about shooting 360-degree photography overall, the mental aspects.&lt;/p&gt;
&lt;h3 id=&#34;what-you-see-is-what-you-get&#34;&gt;What You See is What You Get&lt;/h3&gt;
&lt;p&gt;Traditionally with wide-angle lenses, the perspective is dramatically
stretched. The foreground will appear very close, and the background will
appear very far. In normal photography, it would be important to get close to
the subject else everything would seem very far.&lt;/p&gt;
&lt;p&gt;With 360 photography however since the resulting image will be wrapped around a
sphere rather than displayed on a 2D plane, the perspective will appear like
what you see with your own eyes in real life. Thus, what you see when you take
a shot with the Theta is what you get.&lt;/p&gt;
&lt;h3 id=&#34;height-level-for-immersion&#34;&gt;Height Level for Immersion&lt;/h3&gt;
&lt;p&gt;Be mindful about how people will view your image. Mostly likely, they will
either be standing up, or sitting down. For optimal immersion, the image would
be shot at the same height level that people would view it. It would feel off
if someone was standing up with a VR headset with the image being taken two
feet off the ground.&lt;/p&gt;
&lt;p&gt;Thus for general shots, take at head level for those standing up, or shoulder
level for those sitting down. The height difference between the two shouldn&#39;t
be terribly different.&lt;/p&gt;
&lt;h3 id=&#34;sweet-spot&#34;&gt;Sweet Spot&lt;/h3&gt;
&lt;p&gt;The Theta has a sweet spot of five feet or less. Farther subjects and the
background will have less resolution, giving a reason to bring subjects closer.&lt;/p&gt;
&lt;h4 id=&#34;keep-it-level&#34;&gt;Keep it Level&lt;/h4&gt;
&lt;p&gt;Keep the camera as level as possible with the horizon. If it is not straight,
when people view your photo, they may get sick from not being straight in the
photo despite being straight in real life. It would be possible to straigthen
it afterwards, but you save a lot of work getting it right out of the camera.&lt;/p&gt;
&lt;h4 id=&#34;fill-the-frame&#34;&gt;Fill the Frame&lt;/h4&gt;
&lt;p&gt;Note that it is 360-degree photography. Since you are capturing the whole
environment, you most likely and should not just have one subject. With only
one subject, when people look around in the picture with the headset, they
might have trouble finding the subject as most of the frame will be empty. So
make sure the frame has interesting subjects in every direction.&lt;/p&gt;
&lt;p&gt;Alongside the advice of shooting close, 360-degree photography seems to lend
itself better to shooting in tighter scenes. I shot the Theta inside a small
wooden model of an ancient Chinese building, and the image seemed like it was
taken in a full-sized house.&lt;/p&gt;
&lt;h3 id=&#34;limit-your-presence&#34;&gt;Limit your Presence&lt;/h3&gt;
&lt;p&gt;Try to get out of the shot as much as possible. Since it takes an image in
every direction, it can be difficult to hide. The best option is to get out of
the shot entirely. This means setting the tripod down, and hiding behind a bush
or corner while remotely triggering the shot. Unfortunately, this is a bit
awkward in street photography and snapshot situations.&lt;/p&gt;
&lt;p&gt;The second best option is to be directly under the camera. Hold the tripod up,
resting it on your shoulder or head, and have the camera be above your head.
This helps that when people view the photo, they would have to view directly
down to see you. And your face would not be visible, only the top of your head,
which is much more discreet.&lt;/p&gt;
&lt;h3 id=&#34;being-discreet&#34;&gt;Being Discreet&lt;/h3&gt;
&lt;p&gt;The Theta is so small, and with 360-degree photography being something most
people have no idea about, it is extremely easy to take candid or street shots.&lt;/p&gt;
&lt;p&gt;A lot of the time in Hong Kong, I would just walk around holding the tripod
like how a Queen&#39;s Guard would hold their rifle, and just take photos using the
app. Using the app really makes it look like you&#39;re just checking Facebook or
something, and people never really know you&#39;re taking a photo. Or I might just
set the tripod down, lean against the wall like I&#39;m texting, and take a photo.&lt;/p&gt;
&lt;p&gt;Well, it does emit an annoying shutter sound that I don&#39;t know how to turn off.
But even then, people won&#39;t know what that little thing is yet. Not until it
becomes more popular.&lt;/p&gt;
&lt;h2 id=&#34;sharing-images&#34;&gt;Sharing Images&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can now try out my project &lt;a href=&#34;https://ngokevin.github.io/threeschwifty&#34;&gt;threeschwifty&lt;/a&gt; to view and share your 360-degree images online!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In an upcoming post, I&#39;ll talk more about how to easily share Theta images
using A-Frame VR. It&#39;d be a few lines of HTML, and then most people can view
the 360 image on their smartphone. They&#39;d be able to move and rotate the phone
to look around the image, and even use something like a &lt;a href=&#34;http://www.google.com/get/cardboard/&#34;&gt;Google
Cardboard&lt;/a&gt; holder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://aframe.io/releases/latest/aframe.min.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-sky&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;360-image.jpg&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-sky&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;http://ngokevin.com/~ngoke/360.html&#34;&gt;Try it with one of my sample shots&lt;/a&gt; in a
small Japanese toy store in Mong Kok.&lt;/p&gt;
          </description>
          <guid>
            /blog/360-photography/
          </guid>
        </item>
      
    
      
        <item>
          <title>How A-Frame VR is Different from Other 3D Markup Languages</title>
          <link>/blog/aframe-vs-3dml/</link>
          <pubDate>Mon, 21 Dec 2015 00:00:00 GMT</pubDate>
          <description>
            
              <![CDATA[<img align="left" hspace="5" width="320" src="http://i.imgur.com/kFLzzPC.png"/>Rough diagram of the A-Frame entity-component system.]]>
            
            &lt;p&gt;Upon first seeing A-Frame, branded as &#34;building blocks for the web&#34; displaying
markup like &lt;code&gt;&amp;lt;a-cube&amp;gt;&lt;/code&gt;, developers may conceive A-Frame as yet another 3DML (3D
markup language) such as &lt;a href=&#34;http://www.x3dom.org&#34;&gt;X3Dom&lt;/a&gt; or &lt;a href=&#34;http://tparisi.github.io/glam&#34;&gt;GLAM&lt;/a&gt;. What A-Frame brings to
the game is that it is based off an &lt;a href=&#34;https://aframe.io/docs/core/&#34;&gt;entity-component system&lt;/a&gt;, a pattern
used by universal game engines like &lt;a href=&#34;https://unity3d.com&#34;&gt;Unity&lt;/a&gt; which favors composability
over inheritance. As we&#39;ll see, this makes A-Frame extremely extendable.&lt;/p&gt;
&lt;p&gt;And A-Frame VR is extremely mindful of how to start a developer ecosystem.
There are &lt;a href=&#34;https://github.com/aframevr/awesome-aframe&#34;&gt;tools, tutorials, guides, boilerplates, libraries&lt;/a&gt; being
built and knowledge being readily shared on &lt;a href=&#34;https://aframevr-slack.herokuapp.com/&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;entity-component-system&#34;&gt;Entity-Component System&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://aframe.io/docs/core/&#34;&gt;entity-component system&lt;/a&gt; is a pattern in which every entity, or
object, in a scene are general placeholders. Then components are used to add
appearance, behavior, and functionality. They&#39;re bags of logic and data that
can be applied to any entity, and they can be defined to just about do
&lt;em&gt;anything&lt;/em&gt;, and anyone can easily develop and share their components.  To
imagine this visually, let&#39;s revisit this image:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.imgur.com/kFLzzPC.png&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
A good diagram for imagining what an entity looks like.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;An entity, by itself without components, doesn&#39;t render or do anything. A-Frame
ships with over 15 basic components. We can add a &lt;a href=&#34;https://aframe.io/docs/components/geometry.html&#34;&gt;geometry
component&lt;/a&gt; to give it shape, a &lt;a href=&#34;https://aframe.io/docs/components/material.html&#34;&gt;material component&lt;/a&gt; to give
it appearance, or a &lt;a href=&#34;https://aframe.io/docs/components/light.html&#34;&gt;light component&lt;/a&gt; and &lt;a href=&#34;https://aframe.io/docs/components/sound.html&#34;&gt;sound component&lt;/a&gt; to
have it emit light or sound.&lt;/p&gt;
&lt;p&gt;Each component has properties that further defines how it modifies the entity.
And components can be mixed and matched at will, hence the &#34;composable&#34; word
root of &#34;component&#34;. In traditional terms, they can be thought of as plugins.
And anyone can write them to do anything, even &lt;em&gt;explode&lt;/em&gt; an entity. They are
expected to become an integral part of the workflow of building advanced
scenes.&lt;/p&gt;
&lt;h3 id=&#34;writing-and-sharing-components&#34;&gt;Writing and Sharing Components&lt;/h3&gt;
&lt;p&gt;So at what point does the promise of the ecosystem come in? A component is
simply &lt;strong&gt;a plain JavaScript object&lt;/strong&gt; that defines several &lt;a href=&#34;https://aframe.io/docs/core/component.html#Component_Definition_and_Lifecycle&#34;&gt;lifecycle
handlers&lt;/a&gt; that manages the component&#39;s data. Here are some
example third-party components that I and other people have written:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ngokevin/aframe-text-component&#34;&gt;Text component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ngokevin/aframe-layout-component&#34;&gt;Layout component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dmarcos/a-invaders/blob/master/js/components/explode.js&#34;&gt;Explode component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dmarcos/a-invaders/blob/master/js/components/spawner.js&#34;&gt;Spawner component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JosePedroDias/aframe-extrude-and-lathe&#34;&gt;Extrude and lathe component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small components can be as little as a few lines of code. Under the hood, they
either do three.js object or JavaScript DOM manipulations. I will go into more
detail how to write a component at a later date, but to get started building a
sharable component, check out the &lt;a href=&#34;https://github.com/ngokevin/aframe-component-boilerplate&#34;&gt;component boilerplate&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;comparison-with-other-3dmls&#34;&gt;Comparison with Other 3DMLs&lt;/h2&gt;
&lt;p&gt;Other 3DMLs, or any markup languages at all for that matter, are based on an
inheritance pattern. This is sort of the default pattern to go towards given
the heirarchichal nature of HTML and XML. Even A-Frame was initially built in
this way. The problem is that this lacks composability. Customizing objects to
do something more than basic becomes difficult, both to the user and to the
library developer.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.imgur.com/A98j4uM.png&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
Difficulty of extending traditional objects in 3DML.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The functionality of the language then becomes dependent on how many features
the maintainers and the library add. With A-Frame however, composability brings
about limitless functionality:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.imgur.com/5SYtEZS.jpg&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
Composability makes it easy to extend objects in A-Frame.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Putting it logically, the different kinds of functionality you can squeeze out
of an object is the permutation of the number of components you have. With the
basic 16 components that A-Frame comes with, that&#39;s 65536 different sets of
components that could be used. Add in the fact that components can be further
customized with properties, and that there is an ecosystem of components to tap
into, the previous use of the word &#34;limitless&#34; was quite literal.&lt;/p&gt;
&lt;p&gt;With other 3DML libraries, if they ship 50 different kinds of objects, then you
get only get 50 different kinds of objects with fixed behavior.&lt;/p&gt;
          </description>
          <guid>
            /blog/aframe-vs-3dml/
          </guid>
        </item>
      
    
      
        <item>
          <title>A-Frame - Virtual Reality on the Web Simplified</title>
          <link>/blog/aframe/</link>
          <pubDate>Wed, 16 Dec 2015 00:00:00 GMT</pubDate>
          <description>
            
              <![CDATA[<img align="left" hspace="5" width="320" src="http://i.imgur.com/TyqA9Gwl.png"/>A psychadelic example I created with A-Frame VR.]]>
            
            &lt;p&gt;Today, the Mozilla virtual reality team (&lt;a href=&#34;http://mozvr.com&#34;&gt;MozVR&lt;/a&gt;)
released an open-source library for beginners and developers alike to easily
create WebVR experiences. It&#39;s called &lt;a href=&#34;http://aframe.io&#34;&gt;A-Frame&lt;/a&gt;. A-Frame
wraps three.js into custom elements so the HTML and DOM manipulations that web
developers are accustomed to can be used to create 3D VR scenes in the
browser. Under the hood, A-Frame brings the &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;entity component
system&lt;/a&gt;, a pattern
common in game development, to the DOM. It supports both desktop, if you got a
Rift, or easier, you can even use a smartphone. This post serves as a
speed-through introduction of A-Frame, refer the
&lt;a href=&#34;http://aframe.io/docs&#34;&gt;documentation&lt;/a&gt; at any time for much more detail.&lt;/p&gt;
&lt;p&gt;A-Frame, like the video games that have influenced all of us, ships at a
several difficulty levels. We&#39;ll journey all the way from the comfortable bed
of hierarchical HTML, through the jungles of the core entity-component system,
and finally scale the walls of integration with &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.imgur.com/tf9DteR.png&#34; /&gt;
&lt;div class=&#34;page-caption&#34;&gt;&lt;span&gt;
  Check out A-Frame stylin&#39; with the DevTools.
&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;enabling-webvr&#34;&gt;Enabling WebVR&lt;/h2&gt;
&lt;p&gt;At time of writing, to view the scenes in VR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On desktop, get Firefox Developer Edition or Firefox Nightly, and install the
  &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/mozilla-webvr-enabler/&#34;&gt;WebVR Enabler Add-on&lt;/a&gt;. To use with an Oculus Rift DK2, have the Oculus
  runtime installed (0.5.x for OS X).&lt;/li&gt;
&lt;li&gt;On mobile, just open any A-Frame site using your phone browser (e.g., Firefox
  for iOS, Firefox for Android, Chrome for Android, Safari for iOS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;piece-of-cake-difficulty-codepen&#34;&gt;&#34;Piece of Cake&#34; Difficulty - Codepen&lt;/h2&gt;
&lt;p&gt;For those that just want to play around with A-Frame immediately, check out the
&lt;a href=&#34;http://codepen.io/team/mozvr/pen/BjygdO?editors=100&#34;&gt;example on Codepen&lt;/a&gt;. Codepen lets you edit code in the browser and
immediately see the result. You&#39;ll see a scene that currenty looks something
like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;A-Frame Codepen&#34; src=&#34;http://i.imgur.com/4uSINKZ.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With the introductory Codepen examples, we are exposing a very high-level
abstraction on top of A-Frame, using templated primitives, to ease developers
into the entity-component system. So this should be fairly readable to most. Now
what do we do with this?  Click on the Goggles icon to view in VR. And try
modifying some values and see the scene change live.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try changing the color of the cube (e.g., &lt;code&gt;color=&#34;#748B9C&#34;&lt;/code&gt; for a rainy day blue).&lt;/li&gt;
&lt;li&gt;Try changing the size of the sphere (e.g., &lt;code&gt;radius=&#34;0.25&#34;&lt;/code&gt; to make it a little baby sphere).&lt;/li&gt;
&lt;li&gt;Try changing the position of the cylinder (e.g., &lt;code&gt;position=&#34;1 1 1&#34;&lt;/code&gt; to raise the roof).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As amazing as that was, a Codepen is still a pen. The ambitions of VR are not
suitable for being fenced in. Like the Kool-Aid Man, we must break out of the
confinements of a coding playground.&lt;/p&gt;
&lt;h2 id=&#34;lets-rock-difficulty-boilerplate&#34;&gt;&#34;Let&#39;s Rock&#34; Difficulty - Boilerplate&lt;/h2&gt;
&lt;p&gt;For beginners that want to start playing with some toy scenes locally and hacking away,
check out the basic &lt;a href=&#34;https://github.com/aframevr/aframe-boilerplate&#34;&gt;A-Frame boilerplate&lt;/a&gt;.
Boilerplate refers to pre-written reusable code that can be made your own with
minimal modification.&lt;/p&gt;
&lt;p&gt;Note that I say this intended for beginners because it focuses on using the
templated primitives abstraction and hides away the underlying engine. For
developers that want to get their hands dirty, I would skip this and move
directly to the entity-component system.&lt;/p&gt;
&lt;p&gt;The boilerplate provides the same code found in the Codepen above, but also can
be downloaded as a ZIP package or forked on Github. Once you have the code on
your machine, just modify it in your favorite text editor and fire it up in the
browser.&lt;/p&gt;
&lt;h2 id=&#34;come-get-some-difficulty-primitives&#34;&gt;&#34;Come Get Some&#34; Difficulty - Primitives&lt;/h2&gt;
&lt;p&gt;For those that want to start writing scenes from scratch in vanilla HTML, check
out A-Frame&#39;s &lt;a href=&#34;https://aframe.io/docs/primitives/&#34;&gt;pre-built primitive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &#34;primitive&#34; in computer graphics is a basic building block like a cube or a
sphere. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are pre-fabricated custom elements like &lt;code&gt;&amp;lt;a-cube&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;a-sphere&amp;gt;&lt;/code&gt; that combine
  recipes of components to achieve the intended result.&lt;/li&gt;
&lt;li&gt;Are a convenience and usability wrapper on top of the underlying entity-component system.&lt;/li&gt;
&lt;li&gt;Are much cleaner in syntax but are less flexible and composable than using the
  entity-component system directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, rather than having:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;camera&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;look-controls&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;wasd-controls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: box; depth: 1; height: 1; width: 1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: red&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Templates wrap the entity into something more concise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-cube&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Anyone can create their own templates since they are just defined in HTML.
Let&#39;s reveal the definition of &lt;code&gt;&amp;lt;a-cube&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;a-template&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;a-cube&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0 0 0&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;opacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;shader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;standard&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;transparent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;metalness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.0&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;roughness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: box;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      width: ${width};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      height: ${height};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      depth: ${depth};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      translate: ${translate}&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: ${color};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      opacity: ${opacity};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      shader: ${shader};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      transparent: ${transparent};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      metalness: ${metalness};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      roughness: ${roughness};&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                      src: url(${src})&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;a-cube&amp;gt;&lt;/code&gt; wraps a single entity (with the &lt;code&gt;geometry.primitive=box&lt;/code&gt;) and
exposes a few component attributes as HTML attributes. Don&#39;t worry about the
attributes that seem unfamiliar, we will go over some of them later and point
to the comprehensive documentation.&lt;/p&gt;
&lt;p&gt;A-Frame also has &lt;a href=&#34;http://aframe.io/docs/core/animation.html&#34;&gt;an animation system&lt;/a&gt;. Let&#39;s try
makng the cube rotate indefinitely. The animation system also works with the core system,
not just templates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-cube&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-animation&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;rotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;indefinite&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0 360 360&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-animation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-scene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Templates &lt;em&gt;may&lt;/em&gt; be subject to flux such as reimplementation or modularization
into a different repository. From a technical standpoint, A-Frame templates and
primitives are somewhat immature and less flexible, but from a product standpoint,
they are more usable and less exotic to newer users of A-Frame. For full flexbility,
we have to dig deeper.&lt;/p&gt;
&lt;h2 id=&#34;damn-im-good-difficulty-entity-component-system&#34;&gt;&#34;Damn I&#39;m Good&#34; Difficulty - Entity-Component System&lt;/h2&gt;
&lt;p&gt;For those that want to be unleashed into the full promised power, flexibility,
and composability of A-Frame, we can finally end the hand-waving and check out
the &lt;a href=&#34;http://aframe.io/docs/core/&#34;&gt;core entity-component system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Despite having been abstracted away from the aforementioned templates, A-Frame is built on an
entity-component system. Entities are general purpose placeholder objects.
Components modify the appearance, behavior, or functionality of the entities.
And every object in the scene is an entity whether it be the player, a tree, a
monster, the sky, a sound, lights. Components can be mixed and matched,
composed and overridden. A-Frame comes with a bunch of components, and anyone
can write their own components to have objects look however or do whatever
they want. Check out all of the &lt;a href=&#34;http://aframe.io/docs/components/&#34;&gt;shipped components&lt;/a&gt;,
and check out some third-party custom components at &lt;a href=&#34;http://github.com/aframevr/awesome-aframe&#34;&gt;awesome-aframe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s start with a blank entity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, this lonely entity inherently only has a position, rotation, and
scale in the scene. Without any other components, nothing will render on the
scene. Let&#39;s change that, giving it a geometry (shape) and material (appearance).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: red&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we should be seeing something. But why stop there? Let&#39;s make it emit light on other
entities.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: red&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; intensity: 2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&#39;s have it stare at the camera.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: red&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; intensity: 2&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;look-at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[camera]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&#39;s have it emit sound.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;primitive: sphere&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;color: red&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;type: point; intensity: 2&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;look-at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[camera]&amp;quot;&lt;/span&gt;
          &lt;span class=&#34;na&#34;&gt;sound&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;src: squeak.mp3&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a-entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are all of these components that can customize our entities. And all
these attributes that can customize our components. And anyone can &lt;a href=&#34;http://github.com/ngokevin/aframe-component-boilerplate&#34;&gt;write their
own components&lt;/a&gt;, having free reign to add any behavior they
can imagine. Some components we might write include a layout component, a
vibrate component, a cloner component, an explode component, a set-on-fire
component. I am very excited to see what people come up with.&lt;/p&gt;
&lt;p&gt;The raw entity-component system is what we consider low-level. But all
low-level things are made to be abstracted. Bring on the hot trend of 2015,
React.&lt;/p&gt;
&lt;h2 id=&#34;born-to-be-wild-difficulty-react&#34;&gt;&#34;Born to be Wild&#34; Difficulty - React&lt;/h2&gt;
&lt;p&gt;Note that A-Frame + React integration is experimental and is currently my
personal project. I haven&#39;t yet stress-tested possible performance limitations
that the Virtual DOM may introduce. &lt;a href=&#34;https://github.com/Izzimach/react-three&#34;&gt;react-three&lt;/a&gt;,
another React library on top of three.js, had limitations because each object
introduced its own &lt;code&gt;requestAnimationFrame&lt;/code&gt;. React + A-Frame does not have those kinds of
limitations.&lt;/p&gt;
&lt;p&gt;React is a great fit with A-Frame now that React v0.14 accepts custom
attributes.  I gave it a shot and within an hour, I developed a &lt;a href=&#34;http://github.com/ngokevin/aframe-react&#34;&gt;library
integrating A-Frame and React&lt;/a&gt; and &lt;a href=&#34;http://github.com/ngokevin/aframe-react-boilerplate&#34;&gt;a boilerplate featuring
aframe-react and Webpack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why does React work so well with A-Frame?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A-Frame is already based on custom elements. It does not take much to wrap it with React.&lt;/li&gt;
&lt;li&gt;Reactive updates and data binding vastly reduces the amount of manual DOM manipulation.&lt;/li&gt;
&lt;li&gt;The React ecosystem with NPM provides a great way for sharing A-Frame templates, mixins,
  and components.&lt;/li&gt;
&lt;li&gt;Redux can then be layered on to provide statefulness to the application which will be
  great for editors and tooling.&lt;/li&gt;
&lt;li&gt;Event handling is easier as we can just set event handler functions as props on
  our A-Frame/React components.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; makes it easy to extend and compose A-Frame component data, making A-Frame
  mixins completely obsolete.&lt;/li&gt;
&lt;li&gt;With Babel, a standard tool for transpiling React, giving object rest/spread properties
  and templating strings, passing down components are easy and concise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s an &lt;a href=&#34;http://github.com/ngokevin/aframe-react-boilerplate/tree/master/src/js/app.js&#34;&gt;example scene&lt;/a&gt; where clicking a spinning cube changes its color.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ExampleScene&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;changeColor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;colors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Camera&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cursor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Camera&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sky&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Light&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ambient&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;#888&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Light&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;directional&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;intensity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-1 1 0&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Light&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;directional&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;intensity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;1 1 0&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Entity&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;geometry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;primitive: box&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;material&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;0 0 -5&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Animation&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;rotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;5000&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;indefinite&amp;quot;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;0 360 360&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Entity&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Scene&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using React provides the best of all the worlds. The conciseness of A-Frame
templates, the power of the A-Frame core system, and the ecosystem of NPM. The
scene here is pretty concise and easy to read.&lt;/p&gt;
&lt;p&gt;To demonstrate how easy it is to create React components, here is the definition
for a dumb &lt;code&gt;&amp;lt;Light&amp;gt;&lt;/code&gt; using a stateless React component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Light&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Entity&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;light&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Entity&amp;gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I imagine, with the current state of web development, that people will enjoy
this. I know I will.&lt;/p&gt;
&lt;h2 id=&#34;behind-the-scenes-developing-a-frame&#34;&gt;Behind the Scenes - Developing A-Frame&lt;/h2&gt;
&lt;p&gt;Getting more into personal notes, I have been contributing to MozVR and A-Frame over the last
couple months, working on the core entity-component pieces of the system at
&lt;a href=&#34;http://github.com/aframevr/aframe-core&#34;&gt;A-Frame Core&lt;/a&gt;. With Firefox OS
smartphones having &#34;fallen&#34; and with my previous team as well as dissolved,
working in 3D and VR has been immensely exciting. To catch up, I have had to
read and take notes about design, brush up on my linear alegbra, and dive into
the world of 3D rendering. &lt;a href=&#34;http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123&#34;&gt;The Design of Everything Things&lt;/a&gt;,
&lt;a href=&#34;http://www.realtimerendering.com/&#34;&gt;Real-Time Rendering&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.com/Primer-Graphics-Development-Wordware-Library/dp/1556229119&#34;&gt;3D Math Primer&lt;/a&gt;,
&lt;a href=&#34;https://37signals.com/rework/&#34;&gt;Rework&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Virtual-Reality-Insider-Guidebook-Industry/dp/0990999920&#34;&gt;Virtual Reality Insider&lt;/a&gt;
were all books that came in handy.&lt;/p&gt;
&lt;p&gt;The hardest thing about developing on A-Frame was feeling out the target
audience. Should this be for beginners, for everyone and their grandma, for
novices, for seasoned developers? I still don&#39;t feel it&#39;s been quite resolved.
It&#39;s a question that has driven a lot of debates with the API design and
messaging. One instance of contention was the naming of &lt;code&gt;&amp;lt;a-entity&amp;gt;&lt;/code&gt; vs. the
former &lt;code&gt;&amp;lt;a-object&amp;gt;&lt;/code&gt;. Or whether or not to hide the entity-component system
behind templates and primitives such that A-Frame does not seem too exotic.&lt;/p&gt;
&lt;p&gt;The most fun thing about developing on A-Frame was how much there was to learn
and discover. I was just about to hit a ceiling on the Firefox Marketplace
team; after taking the whole React and Redux journey and absorbing everything,
I had well outgrown the project (well, especially since it was dying). Jumping
into 3D and VR, I accumulated &lt;a href=&#34;http://nattyornot.com/bodybuilding-basics-noob-gains-explained/&#34;&gt;noob
gains&lt;/a&gt; on 3D
development, rendering, game development patterns, and API design. And working
with a team in-person rather than remotely was refreshing&lt;/p&gt;
&lt;p&gt;And there&#39;s more to discover like what standard VR interactions will form and
what will VR web browsing look like? It&#39;s imagining a future that hasn&#39;t come.
Y&#39;all remember bring your A-Frame.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Check out the &lt;a href=&#34;http://aframe.io/docs/&#34;&gt;official docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Connect with us and the community on the &lt;a href=&#34;http://aframevr.slack.com&#34;&gt;A-Frame Slack channel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;See a community-populated list of resources at &lt;a href=&#34;http://github.com/aframevr/awesome-aframe&#34;&gt;awesome-aframe&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
          </description>
          <guid>
            /blog/aframe/
          </guid>
        </item>
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  </channel>
</rss>